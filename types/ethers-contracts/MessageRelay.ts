/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace MessageRelay {
  export type MessageStruct = {
    content: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type MessageStructOutput = [string, BigNumber] & {
    content: string;
    createdAt: BigNumber;
  };
}

export interface MessageRelayInterface extends utils.Interface {
  functions: {
    "addUser(address,string,string)": FunctionFragment;
    "changeUserPublicKey(address,string)": FunctionFragment;
    "deleteMessageFrom(address,string)": FunctionFragment;
    "getMessage(address,string)": FunctionFragment;
    "getPublicKey(string)": FunctionFragment;
    "getUsername(address)": FunctionFragment;
    "hasMessageFrom(address,string)": FunctionFragment;
    "hasMessageTo(address,string)": FunctionFragment;
    "sendMessage(address,string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addUser"
      | "changeUserPublicKey"
      | "deleteMessageFrom"
      | "getMessage"
      | "getPublicKey"
      | "getUsername"
      | "hasMessageFrom"
      | "hasMessageTo"
      | "sendMessage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeUserPublicKey",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteMessageFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessage",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsername",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMessageFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMessageTo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeUserPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteMessageFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMessageFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMessageTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MessageRelay extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MessageRelayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addUser(
      userAddress: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      publicKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeUserPublicKey(
      userAddress: PromiseOrValue<string>,
      publicKey: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteMessageFrom(
      userAddress: PromiseOrValue<string>,
      fromUsername: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMessage(
      userAddress: PromiseOrValue<string>,
      fromUsername: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[MessageRelay.MessageStructOutput]>;

    getPublicKey(
      username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUsername(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasMessageFrom(
      userAddress: PromiseOrValue<string>,
      fromUsername: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasMessageTo(
      userAddress: PromiseOrValue<string>,
      toUsername: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    sendMessage(
      userAddress: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      content: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addUser(
    userAddress: PromiseOrValue<string>,
    username: PromiseOrValue<string>,
    publicKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeUserPublicKey(
    userAddress: PromiseOrValue<string>,
    publicKey: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteMessageFrom(
    userAddress: PromiseOrValue<string>,
    fromUsername: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMessage(
    userAddress: PromiseOrValue<string>,
    fromUsername: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MessageRelay.MessageStructOutput>;

  getPublicKey(
    username: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUsername(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  hasMessageFrom(
    userAddress: PromiseOrValue<string>,
    fromUsername: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasMessageTo(
    userAddress: PromiseOrValue<string>,
    toUsername: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sendMessage(
    userAddress: PromiseOrValue<string>,
    username: PromiseOrValue<string>,
    content: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addUser(
      userAddress: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      publicKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeUserPublicKey(
      userAddress: PromiseOrValue<string>,
      publicKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteMessageFrom(
      userAddress: PromiseOrValue<string>,
      fromUsername: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMessage(
      userAddress: PromiseOrValue<string>,
      fromUsername: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MessageRelay.MessageStructOutput>;

    getPublicKey(
      username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUsername(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    hasMessageFrom(
      userAddress: PromiseOrValue<string>,
      fromUsername: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasMessageTo(
      userAddress: PromiseOrValue<string>,
      toUsername: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sendMessage(
      userAddress: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      content: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MessageRelay.MessageStructOutput>;
  };

  filters: {};

  estimateGas: {
    addUser(
      userAddress: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      publicKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeUserPublicKey(
      userAddress: PromiseOrValue<string>,
      publicKey: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteMessageFrom(
      userAddress: PromiseOrValue<string>,
      fromUsername: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMessage(
      userAddress: PromiseOrValue<string>,
      fromUsername: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicKey(
      username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsername(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMessageFrom(
      userAddress: PromiseOrValue<string>,
      fromUsername: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMessageTo(
      userAddress: PromiseOrValue<string>,
      toUsername: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendMessage(
      userAddress: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      content: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addUser(
      userAddress: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      publicKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeUserPublicKey(
      userAddress: PromiseOrValue<string>,
      publicKey: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteMessageFrom(
      userAddress: PromiseOrValue<string>,
      fromUsername: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMessage(
      userAddress: PromiseOrValue<string>,
      fromUsername: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicKey(
      username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsername(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasMessageFrom(
      userAddress: PromiseOrValue<string>,
      fromUsername: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasMessageTo(
      userAddress: PromiseOrValue<string>,
      toUsername: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendMessage(
      userAddress: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      content: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
