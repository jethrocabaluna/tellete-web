/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MessageRelay, MessageRelayInterface } from "../MessageRelay";

const _abi = [
  {
    inputs: [],
    name: "MessageRelay__AddressAlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "MessageRelay__InvalidMessage",
    type: "error",
  },
  {
    inputs: [],
    name: "MessageRelay__InvalidUsername",
    type: "error",
  },
  {
    inputs: [],
    name: "MessageRelay__NoMessage",
    type: "error",
  },
  {
    inputs: [],
    name: "MessageRelay__NoPublicKey",
    type: "error",
  },
  {
    inputs: [],
    name: "MessageRelay__NoUser",
    type: "error",
  },
  {
    inputs: [],
    name: "MessageRelay__UsernameAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "username",
        type: "string",
      },
      {
        internalType: "string",
        name: "publicKey",
        type: "string",
      },
    ],
    name: "addUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "publicKey",
        type: "string",
      },
    ],
    name: "changeUserPublicKey",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "fromUsername",
        type: "string",
      },
    ],
    name: "deleteMessageFrom",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "fromUsername",
        type: "string",
      },
    ],
    name: "getMessage",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "content",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
        ],
        internalType: "struct MessageRelay.Message",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "username",
        type: "string",
      },
    ],
    name: "getPublicKey",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "getUsername",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "fromUsername",
        type: "string",
      },
    ],
    name: "hasMessageFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "toUsername",
        type: "string",
      },
    ],
    name: "hasMessageTo",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "username",
        type: "string",
      },
      {
        internalType: "string",
        name: "content",
        type: "string",
      },
    ],
    name: "sendMessage",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "content",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
        ],
        internalType: "struct MessageRelay.Message",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611960806100206000396000f3fe6080604052600436106100865760003560e01c8063999d849611610059578063999d84961461015e578063b5ff97cc1461017a578063bff90821146101b7578063ce43c032146101f4578063d7554a681461023157610086565b80630d1317ad1461008b57806310ddb74a146100a75780631b95c00e146100e45780636fb6df4314610121575b600080fd5b6100a560048036038101906100a09190611476565b61025a565b005b3480156100b357600080fd5b506100ce60048036038101906100c99190611476565b61046b565b6040516100db91906114ed565b60405180910390f35b3480156100f057600080fd5b5061010b60048036038101906101069190611476565b6105b3565b60405161011891906114ed565b60405180910390f35b34801561012d57600080fd5b5061014860048036038101906101439190611508565b6106fb565b6040516101559190611671565b60405180910390f35b61017860048036038101906101739190611476565b610828565b005b34801561018657600080fd5b506101a1600480360381019061019c9190611476565b61086d565b6040516101ae9190611671565b60405180910390f35b3480156101c357600080fd5b506101de60048036038101906101d99190611693565b6109f4565b6040516101eb9190611726565b60405180910390f35b34801561020057600080fd5b5061021b60048036038101906102169190611748565b610ae6565b6040516102289190611726565b60405180910390f35b34801561023d57600080fd5b5061025860048036038101906102539190611508565b610bf9565b005b600061026582610ed2565b90506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082018054610300906117a4565b80601f016020809104026020016040519081016040528092919081815260200182805461032c906117a4565b80156103795780601f1061034e57610100808354040283529160200191610379565b820191906000526020600020905b81548152906001019060200180831161035c57829003601f168201915b505050505081526020016001820154815250509050600081600001515114156103ce576040517fe8e1ae7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061045b91906111c1565b6001820160009055505050505050565b60008061047783610ed2565b90506000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082018054610512906117a4565b80601f016020809104026020016040519081016040528092919081815260200182805461053e906117a4565b801561058b5780601f106105605761010080835404028352916020019161058b565b820191906000526020600020905b81548152906001019060200180831161056e57829003601f168201915b5050505050815260200160018201548152505090506000816000015151119250505092915050565b6000806105bf83610ed2565b90506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201805461065a906117a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610686906117a4565b80156106d35780601f106106a8576101008083540402835291602001916106d3565b820191906000526020600020905b8154815290600101906020018083116106b657829003601f168201915b5050505050815260200160018201548152505090506000816000015151119250505092915050565b610703611201565b61070c82610f86565b610742576040517f4cd3f55000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061074d84610ed2565b9050600060405180604001604052808581526020016103e8426107709190611805565b815250905080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908051906020019061080e92919061121b565b506020820151816001015590505080925050509392505050565b600061083383610ae6565b905081600282604051610846919061189b565b9081526020016040518091039020908051906020019061086792919061121b565b50505050565b610875611201565b600061088083610ed2565b90506000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201805461091b906117a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610947906117a4565b80156109945780601f1061096957610100808354040283529160200191610994565b820191906000526020600020905b81548152906001019060200180831161097757829003601f168201915b505050505081526020016001820154815250509050600081600001515114156109e9576040517fe8e1ae7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b809250505092915050565b60606000600283604051610a08919061189b565b90815260200160405180910390208054610a21906117a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4d906117a4565b8015610a9a5780601f10610a6f57610100808354040283529160200191610a9a565b820191906000526020600020905b815481529060010190602001808311610a7d57829003601f168201915b50505050509050600081511415610add576040517f85b0bad200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b60606000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054610b34906117a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610b60906117a4565b8015610bad5780601f10610b8257610100808354040283529160200191610bad565b820191906000526020600020905b815481529060010190602001808311610b9057829003601f168201915b50505050509050600081511415610bf0576040517f8ad1a19d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b610c0282610fa2565b610c38576040517ff93d5b8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054610c84906117a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb0906117a4565b8015610cfd5780601f10610cd257610100808354040283529160200191610cfd565b820191906000526020600020905b815481529060010190602001808311610ce057829003601f168201915b505050505090506000815114610d3f576040517f7eb8190b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008084604051610d50919061189b565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610de7576040517f2435647e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600085604051610df8919061189b565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610e9792919061121b565b5082600285604051610ea9919061189b565b90815260200160405180910390209080519060200190610eca92919061121b565b505050505050565b600080600083604051610ee5919061189b565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f7d576040517f8ad1a19d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b6000808251118015610f9b5750610400825111155b9050919050565b60008082905061010081511180610fba575060048151105b15610fc95760009150506111bc565b6000805b82518110156111b5576000838281518110610feb57610fea6118b2565b5b602001015160f81c60f81b9050603060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101580156110545750603960f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b1580156110ba5750604160f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101580156110b85750605a60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b155b801561111f5750606160f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015801561111d5750607a60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b155b80156111515750605f60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156111635760009450505050506111bc565b605f60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614158015611197575082155b156111a157600192505b5080806111ad906118e1565b915050610fcd565b5080925050505b919050565b5080546111cd906117a4565b6000825580601f106111df57506111fe565b601f0160209004906000526020600020908101906111fd91906112a1565b5b50565b604051806040016040528060608152602001600081525090565b828054611227906117a4565b90600052602060002090601f0160209004810192826112495760008555611290565b82601f1061126257805160ff1916838001178555611290565b82800160010185558215611290579182015b8281111561128f578251825591602001919060010190611274565b5b50905061129d91906112a1565b5090565b5b808211156112ba5760008160009055506001016112a2565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112fd826112d2565b9050919050565b61130d816112f2565b811461131857600080fd5b50565b60008135905061132a81611304565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113838261133a565b810181811067ffffffffffffffff821117156113a2576113a161134b565b5b80604052505050565b60006113b56112be565b90506113c1828261137a565b919050565b600067ffffffffffffffff8211156113e1576113e061134b565b5b6113ea8261133a565b9050602081019050919050565b82818337600083830152505050565b6000611419611414846113c6565b6113ab565b90508281526020810184848401111561143557611434611335565b5b6114408482856113f7565b509392505050565b600082601f83011261145d5761145c611330565b5b813561146d848260208601611406565b91505092915050565b6000806040838503121561148d5761148c6112c8565b5b600061149b8582860161131b565b925050602083013567ffffffffffffffff8111156114bc576114bb6112cd565b5b6114c885828601611448565b9150509250929050565b60008115159050919050565b6114e7816114d2565b82525050565b600060208201905061150260008301846114de565b92915050565b600080600060608486031215611521576115206112c8565b5b600061152f8682870161131b565b935050602084013567ffffffffffffffff8111156115505761154f6112cd565b5b61155c86828701611448565b925050604084013567ffffffffffffffff81111561157d5761157c6112cd565b5b61158986828701611448565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156115cd5780820151818401526020810190506115b2565b838111156115dc576000848401525b50505050565b60006115ed82611593565b6115f7818561159e565b93506116078185602086016115af565b6116108161133a565b840191505092915050565b6000819050919050565b61162e8161161b565b82525050565b6000604083016000830151848203600086015261165182826115e2565b91505060208301516116666020860182611625565b508091505092915050565b6000602082019050818103600083015261168b8184611634565b905092915050565b6000602082840312156116a9576116a86112c8565b5b600082013567ffffffffffffffff8111156116c7576116c66112cd565b5b6116d384828501611448565b91505092915050565b600082825260208201905092915050565b60006116f882611593565b61170281856116dc565b93506117128185602086016115af565b61171b8161133a565b840191505092915050565b6000602082019050818103600083015261174081846116ed565b905092915050565b60006020828403121561175e5761175d6112c8565b5b600061176c8482850161131b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806117bc57607f821691505b602082108114156117d0576117cf611775565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118108261161b565b915061181b8361161b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611854576118536117d6565b5b828202905092915050565b600081905092915050565b600061187582611593565b61187f818561185f565b935061188f8185602086016115af565b80840191505092915050565b60006118a7828461186a565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006118ec8261161b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561191f5761191e6117d6565b5b60018201905091905056fea264697066735822122054746f3d6bd1ebfbe13df167d9ec055e10b6e077364a7578c680d1fca92a145264736f6c63430008090033";

type MessageRelayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MessageRelayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MessageRelay__factory extends ContractFactory {
  constructor(...args: MessageRelayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MessageRelay> {
    return super.deploy(overrides || {}) as Promise<MessageRelay>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MessageRelay {
    return super.attach(address) as MessageRelay;
  }
  override connect(signer: Signer): MessageRelay__factory {
    return super.connect(signer) as MessageRelay__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MessageRelayInterface {
    return new utils.Interface(_abi) as MessageRelayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MessageRelay {
    return new Contract(address, _abi, signerOrProvider) as MessageRelay;
  }
}
